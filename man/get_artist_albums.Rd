% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_artist_albums.R
\name{get_artist_albums}
\alias{get_artist_albums}
\title{Get Artist Albums}
\usage{
get_artist_albums(artist_name = NULL, artist_uri = NULL,
  use_artist_uri = FALSE, return_closest_artist = TRUE,
  album_types = "album", message = FALSE,
  access_token = get_spotify_access_token(), parallelize = TRUE,
  future_plan = "multiprocess")
}
\arguments{
\item{artist_name}{String of artist name}

\item{artist_uri}{String of Spotify artist URI. Will only be applied if \code{use_arist_uri} is set to \code{TRUE}. This is useful for pulling artists in bulk and allows for more accurate matching since Spotify URIs are unique.}

\item{use_artist_uri}{Boolean determining whether to search by Spotify URI instead of an artist name. If \code{TRUE}, you must also enter an \code{artist_uri}. Defaults to \code{FALSE}.}

\item{return_closest_artist}{Boolean for selecting the artist result with the closest match on Spotify's Search endpoint. Defaults to \code{TRUE}.}

\item{album_types}{Character vector of album types to include. Valid values are "album", "single", "appears_on", and "compilation". Defaults to "album".}

\item{message}{Boolean for printing the name of artist matched when using \code{return_closest_artist = TRUE}. Defaults to \code{FALSE}.}

\item{access_token}{Spotify Web API token. Defaults to spotifyr::get_spotify_access_token()}

\item{parallelize}{Boolean determining to run in parallel or not. Defaults to \code{TRUE}.}

\item{future_plan}{String determining how `future()`s are resolved when `parallelize == TRUE`. Defaults to \code{multiprocess}.}
}
\description{
This function returns an artist's discography on Spotify
}
\examples{
\dontrun{
albums <- get_artist_albums('radiohead')
}
}
\keyword{albums}
